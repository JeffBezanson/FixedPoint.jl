name: Unit test for Arm

on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:
jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        julia-version: ['1.0', '1', 'nightly']
        os: [ubuntu-20.04]
        distro: [ubuntu20.04]
        arch: [aarch64]

    steps:
      - uses: actions/checkout@v2

      - name: Download Julia Binary
        # FIXME
        run: |
          cd /tmp
          case "${{ matrix.julia-version }}" in
            "1.0" )
              wget -nv https://julialang-s3.julialang.org/bin/linux/aarch64/1.0/julia-1.0.5-linux-aarch64.tar.gz
              ;;
            "1" )
              wget -nv https://julialang-s3.julialang.org/bin/linux/aarch64/1.5/julia-1.5.3-linux-aarch64.tar.gz
              ;;
            "nightly" )
              wget -nv https://julialangnightlies-s3.julialang.org/bin/linux/aarch64/julia-latest-linuxaarch64.tar.gz
              ;;
          esac
          tar -xzf julia-*aarch64.tar.gz -C /home/runner/work/
          mv /home/runner/work/julia-*/ /home/runner/work/julia/
          rm julia-*aarch64.tar.gz
      - uses: uraimo/run-on-arch-action@v2.0.7
        name: Unit Test
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
          dockerRunArgs: |
            -v "/home/runner/work/julia:/home/runner/work/julia"
            --net=host
          install: |
            ln -s /home/runner/work/julia/bin/julia /usr/local/bin/julia
            echo /home/runner/work/julia/lib > /etc/ld.so.conf.d/julia.conf

          run: |
            julia -e 'using InteractiveUtils; versioninfo();'
            julia --project=. --check-bounds=yes --color=yes -e 'using Pkg; Pkg.build(); Pkg.test(coverage=true)'
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v1
        with:
          file: lcov.info
